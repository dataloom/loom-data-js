/*
 * @flow
 */

declare module "lattice" {

  declare export type LatticeConfig = {
    authToken ?:?string;
    baseUrl :string;
  };

  declare function configure(config :LatticeConfig) :void;

  declare export type UUID = string;

  /*
   *
   * models
   *
   */

  declare export type FQN = FullyQualifiedName;

  declare export type FQNObject = {|
    namespace :string;
    name :string;
  |};

  declare export class FullyQualifiedName {
    static isValid :(...args :any[]) => boolean;
    static toString :(...args :any[]) => string;
    namespace :string;
    name :string;
    constructor(namespace :string, name :string) :FullyQualifiedName;
    constructor(fqn :FullyQualifiedName) :FullyQualifiedName;
    constructor(fqn :FQNObject) :FullyQualifiedName;
    constructor(fqn :string) :FullyQualifiedName;
    constructor(fqn :Map<string, string>) :FullyQualifiedName;
    getNamespace() :string;
    getName() :string;
    toObject() :FQNObject;
    toString() :string;
    valueOf() :string;
  }

  declare export type AssociationTypeObject = {|
    bidirectional :boolean;
    dst :UUID[];
    entityType :EntityTypeObject;
    src :UUID[];
  |};

  declare export class AssociationType {
    bidirectional :boolean;
    dst :UUID[];
    entityType :EntityType;
    src :UUID[];
    toImmutable() :Map<*, *>;
    toObject() :AssociationTypeObject;
    valueOf() :number;
  }

  declare export class AssociationTypeBuilder {
    build() :AssociationType;
    setBidirectional(bidirectional :boolean) :AssociationTypeBuilder;
    setDestinationEntityTypeIds(destinationEntityTypeIds :UUID[]) :AssociationTypeBuilder;
    setEntityType(entityType :EntityType) :AssociationTypeBuilder;
    setSourceEntityTypeIds(sourceEntityTypeIds :UUID[]) :AssociationTypeBuilder;
  }

  declare export type EntityTypeObject = {|
    baseType ?:UUID;
    category ?:SecurableType;
    description ?:string;
    id ?:UUID;
    key :UUID[];
    properties :UUID[];
    propertyTags ?:Object;
    schemas :FQNObject[];
    title :string;
    type :FQNObject;
  |};

  declare export class EntityType {
    baseType :?UUID;
    category :?SecurableType;
    description :?string;
    id :?UUID;
    key :UUID[];
    properties :UUID[];
    propertyTags :?Object;
    schemas :FQN[];
    title :string;
    type :FQN;
    toImmutable() :Map<*, *>;
    toObject() :EntityTypeObject;
    valueOf() :number;
  }

  declare export class EntityTypeBuilder {
    build() :EntityType;
    setBaseType(baseType :?UUID) :EntityTypeBuilder;
    setCategory(category :?SecurableType) :EntityTypeBuilder;
    setDescription(description :?string) :EntityTypeBuilder;
    setId(entityTypeId :?UUID) :EntityTypeBuilder;
    setKey(key :UUID[]) :EntityTypeBuilder;
    setPropertyTags(propertyTags :?Object) :EntityTypeBuilder;
    setPropertyTypes(propertyTypes :UUID[]) :EntityTypeBuilder;
    setSchemas(schemas :$ReadOnlyArray<FQN | FQNObject>) :EntityTypeBuilder;
    setTitle(title :string) :EntityTypeBuilder;
    setType(entityTypeFQN :FQN | FQNObject | string) :EntityTypeBuilder;
  }

  declare export type PropertyTypeObject = {|
    analyzer ?:AnalyzerType;
    datatype :string;
    description ?:string;
    enumValues ?:string[];
    id ?:UUID;
    indexType ?:IndexType;
    multiValued ?:boolean;
    pii ?:boolean;
    schemas :FQNObject[];
    title :string;
    type :FQNObject;
  |};

  declare export class PropertyType {
    analyzer :?AnalyzerType;
    datatype :string;
    description :?string;
    enumValues :?string[];
    id :?UUID;
    indexType :?IndexType;
    multiValued :?boolean;
    pii :?boolean;
    schemas :FQN[];
    title :string;
    type :FQN;
    toImmutable() :Map<*, *>;
    toObject() :PropertyTypeObject;
    valueOf() :number;
  }

  declare export class PropertyTypeBuilder {
    build() :PropertyType;
    setAnalyzer(analyzer :?AnalyzerType) :PropertyTypeBuilder;
    setDataType(datatype :string) :PropertyTypeBuilder;
    setDescription(description :?string) :PropertyTypeBuilder;
    setEnumValues(enumValues :?$ReadOnlyArray<string>) :PropertyTypeBuilder;
    setId(propertyTypeId :?UUID) :PropertyTypeBuilder;
    setIndexType(indexType :?IndexType) :PropertyTypeBuilder;
    setMultiValued(multiValued :?boolean) :PropertyTypeBuilder;
    setPii(pii :?boolean) :PropertyTypeBuilder;
    setSchemas(schemas :$ReadOnlyArray<FQN | FQNObject>) :PropertyTypeBuilder;
    setTitle(title :string) :PropertyTypeBuilder;
    setType(propertyTypeFQN :FQN | FQNObject | string) :PropertyTypeBuilder;
  }

  declare export type SchemaObject = {|
    entityTypes :EntityTypeObject[];
    fqn :FQNObject;
    propertyTypes :PropertyTypeObject[];
  |};

  declare export class Schema {
    entityTypes :EntityType[];
    fqn :FQN;
    propertyTypes :PropertyType[];
    toImmutable() :Map<*, *>;
    toObject() :SchemaObject;
    valueOf() :number;
  }

  declare export class SchemaBuilder {
    build() :Schema;
    setEntityTypes(entityTypes :$ReadOnlyArray<EntityType | EntityTypeObject>) :SchemaBuilder;
    setFullyQualifiedName(fqn :FullyQualifiedName) :SchemaBuilder;
    setPropertyTypes(propertyTypes :$ReadOnlyArray<PropertyType | PropertyTypeObject>) :SchemaBuilder;
  }

  /*
   *
   * constants & enums
   *
   */

  declare export type ActionTypes = {|
    ADD :'ADD';
    REMOVE :'REMOVE';
    REQUEST :'REQUEST';
    SET :'SET';
  |};

  declare export type ActionType = $Values<ActionTypes>;

  declare export type AnalyzerTypes = {|
    METAPHONE :'METAPHONE';
    NONE :'NONE';
    NOT_ANALYZED :'NOT_ANALYZED';
    STANDARD :'STANDARD';
  |};

  declare export type AnalyzerType = $Values<AnalyzerTypes>;

  declare export type DeleteTypes = {|
    Hard :'Hard';
    Soft :'Soft';
  |};

  declare export type DeleteType = $Values<DeleteTypes>;

  declare export type IndexTypes = {|
    BTREE :'BTREE';
    GIN :'GIN';
    HASH :'HASH';
    NONE :'NONE';
  |};

  declare export type IndexType = $Values<IndexTypes>;

  declare export type SecurableTypes = {|
    AssociationType :'AssociationType';
    ComplexType :'ComplexType';
    EdgeType :'EdgeType';
    EntitySet :'EntitySet';
    EntityType :'EntityType';
    LinkingEntityType :'LinkingEntityType';
    Organization :'Organization';
    OrganizationRole :'OrganizationRole';
    PropertyTypeInEntitySet :'PropertyTypeInEntitySet';
  |};

  declare export type SecurableType = $Values<SecurableTypes>;

  declare export type UpdateTypes = {|
    Merge :'Merge';
    PartialReplace :'PartialReplace';
    Replace :'Replace';
  |};

  declare export type UpdateType = $Values<UpdateTypes>;

  /*
   *
   * module exports
   *
   */

  declare export var AnalysisApi;
  declare export var AppApi;
  declare export var AuthorizationApi;
  declare export var DataApi;
  declare export var DataIntegrationApi;
  declare export var EntityDataModelApi;
  declare export var LinkingApi;
  declare export var OrganizationsApi;
  declare export var PermissionsApi;
  declare export var PersistentSearchApi;
  declare export var PrincipalsApi;
  declare export var RequestsApi;
  declare export var SearchApi;

  declare export var Constants :{
    AT_CLASS :'@class';
    AT_ID :'@id';
    OPENLATTICE_ID_FQN :'openlattice.@id';
  };

  declare export var Models :{
    AssociationType :typeof AssociationType;
    AssociationTypeBuilder :typeof AssociationTypeBuilder;
    EntityType :typeof EntityType;
    EntityTypeBuilder :typeof EntityTypeBuilder;
    FullyQualifiedName :typeof FullyQualifiedName;
    PropertyType :typeof PropertyType;
    PropertyTypeBuilder :typeof PropertyTypeBuilder;
    Schema :typeof Schema;
    SchemaBuilder :typeof SchemaBuilder;
  };

  declare export var Types :{
    ActionType :ActionType;
    ActionTypes :ActionTypes;
    AnalyzerType :AnalyzerType;
    AnalyzerTypes :AnalyzerTypes;
    DeleteType :DeleteType;
    DeleteTypes :DeleteTypes;
    IndexType :IndexType;
    IndexTypes :IndexTypes;
    SecurableType :SecurableType;
    SecurableTypes :SecurableTypes;
    UpdateType :UpdateType;
    UpdateTypes :UpdateTypes;
  };

  declare export default {
    AnalysisApi :Object;
    AppApi :Object;
    AuthorizationApi :Object;
    DataApi :Object;
    DataIntegrationApi :Object;
    EntityDataModelApi :Object;
    LinkingApi :Object;
    OrganizationsApi :Object;
    PermissionsApi :Object;
    PersistentSearchApi :Object;
    PrincipalsApi :Object;
    RequestsApi :Object;
    SearchApi :Object;
    Constants :typeof Constants;
    Models :typeof Models;
    Types :typeof Types;
    configure :typeof configure;
  };
};
