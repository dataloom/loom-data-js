/*
 * @flow
 */

type UUID = string;

type FQN = FullyQualifiedName;

type FQNObject = {|
  namespace :string;
  name :string;
|};

declare class FullyQualifiedName {
  static isValid :(...args :any[]) => boolean;
  static toString :(...args :any[]) => string;
  namespace :string;
  name :string;
  getNamespace() :string;
  getName() :string;
  toObject() :FQNObject;
  toString() :string;
  valueOf() :string;
}

type PropertyTypeObject = {|
  analyzer ?:AnalyzerType;
  datatype :string;
  description ?:string;
  id ?:UUID;
  piiField ?:boolean;
  schemas :FQNObject[];
  title :string;
  type :FQNObject;
|};

declare class PropertyType {
  analyzer :?AnalyzerType;
  datatype :string;
  description :?string;
  id :?UUID;
  piiField :?boolean;
  schemas :FQN[];
  title :string;
  type :FQN;
  asImmutable() :Map<*, *>;
  toObject() :PropertyTypeObject;
  valueOf() :string;
}

declare class PropertyTypeBuilder {
  build() :PropertyType;
  setAnalyzer() :PropertyTypeBuilder;
  setDataType() :PropertyTypeBuilder;
  setDescription() :PropertyTypeBuilder;
  setId() :PropertyTypeBuilder;
  setPii() :PropertyTypeBuilder;
  setSchemas() :PropertyTypeBuilder;
  setTitle() :PropertyTypeBuilder;
  setType() :PropertyTypeBuilder;
}

type AnalyzerTypeEnum = {|
  METAPHONE :'METAPHONE';
  STANDARD :'STANDARD';
|};

type AnalyzerType = $Values<AnalyzerTypeEnum>;

declare module "lattice" {
  declare export default {
    Models: {
      FQN: FQN,
      FQNObject: FQNObject,
      FullyQualifiedName: FullyQualifiedName,
      PropertyType: PropertyType,
      PropertyTypeBuilder: PropertyTypeBuilder,
      PropertyTypeObject: PropertyTypeObject,
    },
    Types: {
      AnalyzerType: AnalyzerType,
      AnalyzerTypeEnum: AnalyzerTypeEnum,
    },
  }
}
